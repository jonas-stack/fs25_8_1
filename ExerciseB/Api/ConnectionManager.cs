using System.Collections.Concurrent;
using Fleck;
using StackExchange.Redis;

namespace Api;

public class ConnectionManager(IDatabase redis)
{
    /// <summary>
    /// the string key is the unique socket ID generated by the client
    /// </summary>
    public ConcurrentDictionary<string, IWebSocketConnection> Sockets { get; set; } = new();
    
    private const string CONNECTION_SET = "connections";
    private const string TOPIC_PREFIX = "topic:";
    private const string CONNECTION_TO_TOPICS = "connection:topics:";

    public async Task Subscribe(IWebSocketConnection socket, string topic)
    {
        var customConnectionId = socket.ConnectionInfo.Id.ToString();
        await redis.SetAddAsync($"{TOPIC_PREFIX}{topic}", customConnectionId);
        await redis.SetAddAsync($"{CONNECTION_TO_TOPICS}{customConnectionId}", topic);
    }
    public async Task<bool> OnOpen(IWebSocketConnection socket, string clientGeneratedConnectionId)
    {
        Sockets.TryAdd(socket.ConnectionInfo.Id.ToString(), socket);
        
        return await redis.SetAddAsync(CONNECTION_SET, clientGeneratedConnectionId);
        
    }

    public async Task Unsubscribe(IWebSocketConnection socket, string topic)
    {
        var customConnectionId = socket.ConnectionInfo.Id.ToString();
        
        await redis.SetRemoveAsync($"{TOPIC_PREFIX}{topic}", customConnectionId);
        
        await redis.SetRemoveAsync($"{CONNECTION_TO_TOPICS}{customConnectionId}", topic);
    }

    public async Task<bool> OnClose(IWebSocketConnection socket, string clientGeneratedConnectionId)
    {
        Sockets.TryRemove(socket.ConnectionInfo.Id.ToString(), out _);
        
        var topics = await redis.SetMembersAsync($"{CONNECTION_TO_TOPICS}{clientGeneratedConnectionId}");
        
        foreach (var topic in topics)
        {
            await redis.SetRemoveAsync($"{TOPIC_PREFIX}{topic}", clientGeneratedConnectionId);
        }
        
        await redis.KeyDeleteAsync($"{CONNECTION_TO_TOPICS}{clientGeneratedConnectionId}");
        
        return await redis.SetRemoveAsync(CONNECTION_SET, clientGeneratedConnectionId);
    }


    

    public async Task BroadcastToAllTopicSubscribers(string topic, string message)
    {
        var subscribers = await redis.SetMembersAsync($"{TOPIC_PREFIX}{topic}");
        
        foreach (var subscriberId in subscribers)
        {
            if (Sockets.TryGetValue(subscriberId.ToString(), out var socket))
            {
                await socket.Send(message);
            }
        }
    }
}